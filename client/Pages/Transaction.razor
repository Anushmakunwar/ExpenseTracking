@page "/transactions"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<h3 class="transaction-title">Transactions</h3>

@if (!isAuthenticated)
{
    <p class="text-danger">You are not authenticated. Redirecting to login...</p>
}
else
{
    <EditForm Model="@transactionModel" OnValidSubmit="HandleTransaction" class="transaction-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="type" class="form-label">Transaction Type</label>
            <InputSelect id="type" class="form-input" @bind-Value="transactionModel.Type">
                <option value="inflow">Inflow</option>
                <option value="outflow">Outflow</option>
                <option value="debt">Debt</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="amount" class="form-label">Amount</label>
            <InputNumber id="amount" class="form-input" @bind-Value="transactionModel.Amount" />
        </div>

        <div class="form-group">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-input" @bind-Value="transactionModel.Title" />
        </div>

        <div class="form-group">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-input" @bind-Value="transactionModel.Description" />
        </div>

        <div class="form-group">
            <label for="tags" class="form-label">Tags</label>
            <InputSelect id="tags" class="form-input" @bind-Value="selectedTags" multiple>
                <option value="0">Select one</option>  <!-- Default option -->
                @foreach (var tag in availableTags)
                {
                    <option value="@tag.Id">@tag.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Add Transaction</button>
    </EditForm>

    <hr />

    <h4>Recent Transactions</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Amount</th>
                <th>Title</th>
                <th>Description</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @if (transactions.Any())
            {
                @foreach (var transaction in transactions)
                {
                    <tr>
                        <td>@transaction.Type</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Title</td>
                        <td>@transaction.Description</td>
                        <td>@string.Join(", ", transaction.Tags)</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No transactions found.</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private TransactionModel transactionModel = new TransactionModel();
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private List<TagModel> availableTags = new List<TagModel>();
    private List<int> selectedTags = new List<int>();  // Store selected tag ids
    private bool isAuthenticated = false;
    private string? authToken;

    protected override async Task OnInitializedAsync()
    {
        authToken = await GetAuthTokenAsync();
        if (string.IsNullOrWhiteSpace(authToken))
        {
            isAuthenticated = false;
            Console.WriteLine("User not authenticated. Redirecting to login...");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            isAuthenticated = true;
            await FetchTransactions();
            await FetchTags();
        }
    }

    private async Task FetchTransactions()
    {
        Console.WriteLine("Fetching transactions...");
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/transactions");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<TransactionModel>>();
                if (responseData != null)
                {
                    transactions = responseData;
                    Console.WriteLine($"Fetched {transactions.Count} transactions.");
                }
            }
            else
            {
                Console.WriteLine("Failed to fetch transactions.");
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    Console.WriteLine("Authentication failed. Redirecting to login...");
                    NavigationManager.NavigateTo("/login");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching transactions: {ex.Message}");
        }
    }

    private async Task FetchTags()
    {
        Console.WriteLine("Fetching tags...");
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/tags");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<List<TagModel>>();
                if (responseData != null)
                {
                    availableTags = responseData;
                    Console.WriteLine($"Fetched {availableTags.Count} tags.");
                }
            }
            else
            {
                Console.WriteLine("Failed to fetch tags.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching tags: {ex.Message}");
        }
    }

    private async Task HandleTransaction()
    {
        Console.WriteLine("Submitting transaction...");
        try
        {
            // Ensure selectedTags is populated correctly (e.g., single tag or multiple tags)
            transactionModel.Tags = selectedTags.Where(id => id != 0).ToList();  // Ignore default '0' value

            var request = new HttpRequestMessage(HttpMethod.Post, "api/transactions")
            {
                Content = JsonContent.Create(transactionModel)
            };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Transaction added successfully.");
                transactions.Add(transactionModel); // Add to local list
                transactionModel = new TransactionModel(); // Reset the form
                selectedTags.Clear(); // Reset selected tags
            }
            else
            {
                Console.WriteLine("Failed to add transaction.");
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    Console.WriteLine("Authentication failed. Redirecting to login...");
                    NavigationManager.NavigateTo("/login");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private async Task<string?> GetAuthTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
    }

    // Model for tags
    public class TagModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class TransactionModel
    {
        [Required(ErrorMessage = "Type is required")]
        public string Type { get; set; } = "inflow";

        [Required(ErrorMessage = "Amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than zero")]
        public decimal Amount { get; set; }

        [Required(ErrorMessage = "Title is required")]
        public string Title { get; set; }

        public string? Description { get; set; }

        public List<int> Tags { get; set; } = new List<int>();  // Store tag ids
    }
}
