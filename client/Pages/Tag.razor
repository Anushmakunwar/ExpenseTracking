@page "/tags"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations

<h3 class="tag-title">Tags</h3>

@if (!isAuthenticated)
{
    <p class="text-danger">You are not authenticated. Redirecting to login...</p>
}
else
{
    <EditForm Model="@tagModel" OnValidSubmit="HandleTag" class="tag-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name" class="form-label">Tag Name</label>
            <InputText id="name" class="form-input" @bind-Value="tagModel.Name" />
        </div>

        <div class="form-group">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-input" @bind-Value="tagModel.Description" />
        </div>

        <button type="submit" class="btn btn-primary">Add Tag</button>
    </EditForm>

    <hr />

    <h4>Existing Tags</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th> <!-- Added Actions column for delete -->
            </tr>
        </thead>
        <tbody>
            @if (tags.Any())
            {
                @foreach (var tag in tags)
                {
                    <tr>
                        <td>@tag.Name</td>
                        <td>@(tag.Description ?? "NAN")</td>
                        <td>
                            <button class="delete-btn" @onclick="() => ConfirmDelete(tag.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center">No tags found.</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="page-button" @onclick="() => ChangePage(currentPage - 1)" disabled="@(!CanGoBack)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="page-button" @onclick="() => ChangePage(currentPage + 1)" disabled="@(!CanGoForward)">Next</button>
    </div>

    @if (showDeleteConfirmation)
    {
        <div class="modal">
            <div class="modal-content">
                <p>Are you sure you want to delete this tag?</p>
                <button class="btn btn-danger" @onclick="DeleteTag">Yes</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
            </div>
        </div>
    }
}

@code {
    private TagModel tagModel = new TagModel();
    private List<TagModel> tags = new List<TagModel>();
    private bool isAuthenticated = false;
    private string? authToken;

    private int currentPage = 1;
    private int pageSize = 4;
    private int totalPages = 1;

    private bool showDeleteConfirmation = false; // Show/Hide delete confirmation modal
    private int tagToDeleteId; // The ID of the tag to delete

    protected override async Task OnInitializedAsync()
    {
        // Check authentication
        authToken = await GetAuthTokenAsync();
        if (string.IsNullOrWhiteSpace(authToken))
        {
            isAuthenticated = false;
            Console.WriteLine("User not authenticated. Redirecting to login...");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            isAuthenticated = true;
            await FetchTags();
        }
    }

    private async Task FetchTags()
    {
        Console.WriteLine("Fetching tags...");
        try
        {
            var token = await GetAuthTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var requestUri = $"http://localhost:5050/api/tags?limit={pageSize}&page={currentPage}"; // Use limit and page in URL
            var response = await Http.GetAsync(requestUri);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PaginatedResponse<TagModel>>();
                tags = result?.Data ?? new List<TagModel>();
                totalPages = result?.TotalPages ?? 1;
                Console.WriteLine($"Fetched {tags.Count} tags.");
            }
            else
            {
                Console.WriteLine("Failed to fetch tags.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching tags: {ex.Message}");
        }
    }

    private async Task HandleTag()
    {
        Console.WriteLine("Submitting tag...");
        try
        {
            // Retrieve userId from localStorage
            var userIdString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            // Check if userIdString is null or empty, then parse to int if valid
            if (string.IsNullOrEmpty(userIdString) || !int.TryParse(userIdString, out var UserId))
            {
                Console.WriteLine("User ID is missing or invalid. Cannot submit tag.");
                return;
            }

            // Set UserId dynamically in the tag model
            tagModel.UserId = UserId;

            var request = new HttpRequestMessage(HttpMethod.Post, "api/tags")
            {
                Content = JsonContent.Create(tagModel)
            };

            // Add the Bearer token to the request header
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            // Send the request
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Tag added successfully.");
                tags.Add(tagModel); // Add to the local list
                tagModel = new TagModel(); // Reset the form
            }
            else
            {
                Console.WriteLine("Failed to add tag.");
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    Console.WriteLine("Authentication failed. Redirecting to login...");
                    NavigationManager.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding tag: {ex.Message}");
        }
    }

    private async Task<string?> GetAuthTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > totalPages) return;

        currentPage = newPage;
        await FetchTags();
    }

    private bool CanGoBack => currentPage > 1;
    private bool CanGoForward => currentPage < totalPages;

    private void ConfirmDelete(int tagId)
    {
        tagToDeleteId = tagId;
        showDeleteConfirmation = true;
    }

    private async Task DeleteTag()
    {
        Console.WriteLine($"Deleting tag with ID: {tagToDeleteId}...");
        try
        {
            var token = await GetAuthTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"http://localhost:5050/api/tags/{tagToDeleteId}");

            if (response.IsSuccessStatusCode)
            {
                tags.RemoveAll(t => t.Id == tagToDeleteId);  
                showDeleteConfirmation = false; 
                Console.WriteLine("Tag deleted successfully.");
            }
            else
            {
                Console.WriteLine("Failed to delete tag.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting tag: {ex.Message}");
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false; 
    }

    public class PaginatedResponse<T>
    {
        public List<T> Data { get; set; }
        public int TotalPages { get; set; }
        public int TotalCount { get; set; }
    }

    public class TagModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        public string? Description { get; set; }

        public int? UserId { get; set; }

        public int Id { get; set; } 
    }
}
