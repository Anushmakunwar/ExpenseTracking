@page "/register"
@inject HttpClient Http
@layout NoNavLayout
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<div class="register-container">
    <!-- Form Section -->
    <div class="register-form-container">
        <h2 class="register-subtitle">Welcome to the Money Management App</h2>
        <h1 class="register-title">Create an Account</h1>

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="register-form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Username -->
            <div class="input-group">
                <label for="username" class="input-label">Username</label>
                <InputText id="username" class="input-field" @bind-Value="registerModel.Username" placeholder="yourname@example.com" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <!-- Email -->
            <div class="input-group">
                <label for="email" class="input-label">Email</label>
                <InputText id="email" class="input-field" @bind-Value="registerModel.Email" placeholder="youremail@example.com" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <!-- Currency -->
            <div class="input-group">
                <label for="currency" class="input-label">Currency</label>
                <InputText id="currency" class="input-field" @bind-Value="registerModel.Currency" placeholder="USD, EUR, etc." />
                <ValidationMessage For="@(() => registerModel.Currency)" />
            </div>

            <!-- Password -->
            <div class="input-group">
                <label for="password" class="input-label">Password</label>
                <InputText id="password" class="input-field" type="password" @bind-Value="registerModel.Password" placeholder="yourpassword" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <!-- Confirm Password -->
            <div class="input-group">
                <label for="confirmPassword" class="input-label">Confirm Password</label>
                <InputText id="confirmPassword" class="input-field" type="password" @bind-Value="registerModel.ConfirmPassword" placeholder="confirm your password" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <!-- Register Button -->
            <div>
                <button type="submit" class="submit-button">
                    Register
                </button>
            </div>
        </EditForm>

        <!-- Separator with "Or" -->
        <div class="separator">
            <span class="separator-line"></span>
            <span class="separator-text">Or</span>
            <span class="separator-line"></span>
        </div>

        <!-- Login Link -->
        <div class="login-link-container">
            <span>Already have an account?</span>
            <a href="/" class="login-link">Login here</a>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();

    private async Task HandleRegister()
    {
        Console.WriteLine("Registering user...");
        Console.WriteLine($"Username: {registerModel.Username}, Email: {registerModel.Email}, Currency: {registerModel.Currency}");

        var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Registration successful.");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Registration failed.");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Currency is required")]
        public string Currency { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("Password", ErrorMessage = "Password and Confirm Password do not match")]
        public string ConfirmPassword { get; set; }
    }
}
